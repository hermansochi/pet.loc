version: "3.9"
services:
    traefik:
        image: "traefik:2.9"
        container_name: "traefik"
        command:
            --api.dashboard=true
            --api.insecure=true
            --providers.docker=true
            --providers.docker.exposedByDefault=false
        ports:
            - "80:80"
            - "8080:8080"
        networks:
            - traefik-public
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.traefik.entrypoints=http
            - traefik.http.routers.traefik.rule=Host(`traefik.localhost`)
            - traefik.http.services.traefik.loadBalancer.server.port=80

    api:
        build:
            context: api/docker
            dockerfile: development/nginx/Dockerfile
        volumes:
            - ./api:/app:rw
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.api.entrypoints=http
            - traefik.http.routers.api.rule=Host(`api.localhost`)
            - traefik.http.services.api.loadBalancer.server.port=80

    api-php-fpm:
        build:
            context: api/docker
            dockerfile: development/php-fpm/Dockerfile
        volumes:
            - ./api:/app:rw

    api-php-cli:
        build:
            context: api/docker
            dockerfile: development/php-cli/Dockerfile
        volumes:
            - ./api:/app:rw

    react-node:
        build:
            context: react/docker/development/node
        environment:
            WDS_SOCKET_PORT: 0
            NODE_ENV: development
            REACT_APP_API_URL: http://api.localhost/api
            REACT_APP_API_VER: v1
            REACT_APP_AVATARS: http://storage.localhost/pet/avatars
        volumes:
            - ./react:/app:rw
        command: sh -c "until [ -f .ready ] ; do sleep 1 ; done && yarn start"
        tty: true

    react-node-cli:
        build:
            context: react/docker/development/node
        volumes:
            - ./react:/app

    react:
        build:
            context: react/docker/development/nginx
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.react.entrypoints=http
            - traefik.http.routers.react.rule=Host(`react.localhost`) || Host(`www.react.localhost`)
            - traefik.http.services.react.loadBalancer.server.port=80

    underdante-node:
        build:
            context: underdante/docker/development/node
        environment:
            WDS_SOCKET_PORT: 0
            NODE_ENV: development
            REACT_APP_API_URL: http://api.localhost/api
            REACT_APP_API_VER: v1
            REACT_APP_AVATARS: http://storage.localhost/pet/avatars
        volumes:
            - ./underdante:/app:rw
        command: sh -c "until [ -f .ready ] ; do sleep 1 ; done && yarn start"
        tty: true

    underdante-node-cli:
        build:
            context: underdante/docker/development/node
        volumes:
            - ./underdante:/app

    underdante:
        build:
            context: underdante/docker/development/nginx
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.underdante.entrypoints=http
            - traefik.http.routers.underdante.rule=Host(`underdante.localhost`) || Host(`www.underdante.localhost`)
            - traefik.http.services.underdante.loadBalancer.server.port=80

    vue-node:
        build:
            context: vue/docker/development/node
        volumes:
            - ./vue:/app:rw
        command: sh -c "until [ -f .ready ] ; do sleep 1 ; done && npm run dev"
        tty: true

    vue-node-cli:
        build:
            context: vue/docker/development/node
        volumes:
            - ./vue:/app

    vue:
        build:
            context: vue/docker/development/nginx
        volumes:
            - ./vue:/app:rw
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.vue.entrypoints=http
            - traefik.http.routers.vue.rule=Host(`vue.localhost`) || Host(`www.vue.localhost`)
            - traefik.http.services.vue.loadBalancer.server.port=80

    api-postgres:
        image: postgres:13.3-alpine
        environment:
            POSTGRES_USER: app
            POSTGRES_PASSWORD: secret
            POSTGRES_DB: app
        volumes:
            - api-postgres:/var/lib/postgresql/data
        ports:
            - "54321:5432"

    minio:
        image: minio/minio:RELEASE.2022-10-21T22-37-48Z
        command: server --console-address ":9001" /data
        environment:
            MINIO_ROOT_USER: local
            MINIO_ROOT_PASSWORD: secret123456
            MINIO_BROWSER_REDIRECT_URL: http://console.storage.localhost
        volumes:
            - minio-storage:/data
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            # Console
            - "traefik.http.routers.storage-console.rule=Host(`console.storage.localhost`)"
            - "traefik.http.routers.storage-console.entrypoints=http"
            - "traefik.http.routers.storage-console.service=storage-console"
            - "traefik.http.services.storage-console.loadbalancer.server.port=9001"
            # APi
            - "traefik.http.routers.storage.rule=Host(`storage.localhost`)"
            - "traefik.http.routers.storage.entrypoints=http"
            - "traefik.http.routers.storage.service=storage"
            - "traefik.http.services.storage.loadbalancer.server.port=9000"

        healthcheck:
            test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3

    mc-service:
        image: minio/mc
        depends_on:
            minio:
                condition: service_healthy
        restart: on-failure
        entrypoint: /bin/sh -c "/usr/bin/mc alias set myminio http://minio:9000 local secret123456 && /usr/bin/mc mb myminio/pet && /usr/bin/mc anonymous set download myminio/pet"
        networks:
            - default

    cucumber-node-cli:
        build:
            context: e2e/docker/development/node
        volumes:
            - ./e2e:/app
        depends_on:
            - traefik
        network_mode: container:traefik

volumes:
    api-postgres:
    minio-storage:

networks:
    traefik-public:
        name: traefik-public